## Cherry-Picking

What `git cherry-pick` does is take one or more commits, and replay them on top of the current commit. Imagine a repository with the following history graph.

![Node graph -- before cherry-pick](images/cherry-pick-before.png)

If you are on commit **D** and you run `git cherry-pick F`, Git will take the changes that were introduced in commit **F** and replay them _as a new commit_ (shown as **F'**) on top of commit **D.**

![Node graph -- after cherry-pick](images/cherry-pick-after.png)

The reason you end up with a _copy_ of commit **F** rather than commit **F** itself is due to the way commits are constructed. Recall that the parent commit is part of a commit's hash. So despite containing the exact same changes, author information and timestamp; **F'** will have a different parent to **F**, giving it a different hash.

A common workflow in Git is to develop features on small branches, and merge the features one at a time into the master branch. Let's recreate this scenario by adding some branch labels to the graphs.

![Node graph -- with branch labels](images/graph-branch-labels.png)

As you can see, `master` has been updated since `foo` was created. To avoid potential conflicts when `foo` is merged with `master`, we want to bring `master`'s changes into `foo`. Because `master` is the _base_ branch, we want to play `foo`'s commits _on top_ of `master`. Essentially, we want to change commit **C**'s parent from **B** to **F**.

It's not going to be easy, but we can achieve this with `git cherry-pick`. First, we need to create a temporary branch at commit _F_.

```
$ git checkout master
$ git checkout -b foo-tmp
```

![Node graph -- after creating foo-tmp](images/foo-tmp.png)

Now that we have a base on commit _F_, we can `cherry-pick` all of `foo`'s commits on top of it.

```
$ git cherry-pick C D
```

![Node graph -- after cherry-picking C and D](images/cherry-pick-c-d.png)

Now all that's left to do is point `foo` at commit **D'**, and delete the temporary branch `foo-tmp`. We do this with the `reset` command, which points `HEAD` (and therefore the current branch) at a specified commit. The `--hard` flag ensures our working tree is updated as well.

```
$ git checkout foo
$ git reset --hard foo-tmp
$ git branch -D foo-tmp
```

This gives the desired result of `foo`'s commits being upstream of `master`. Note that the original **C** and **D** commits are no longer reachable because no branch points to them.

![Node graph -- after resetting foo](images/cherry-pick-final.png)
